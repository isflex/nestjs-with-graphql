# https://javascript.plainenglish.io/graphql-nodejs-mongodb-made-easy-with-nestjs-and-mongoose-29f9c0ea7e1d
# https://makinhs.medium.com/e2e-testing-made-easy-with-nestjs-part-3-of-graphql-nodejs-mongodb-series-ba913bad7cf2
# https://makinhs.medium.com/authentication-made-easy-with-nestjs-part-4-of-how-to-build-a-graphql-mongodb-d6057eae3fdf

########################################
## The simple mutation, without dynamic vars, is here:
########################################

mutation{
  createUser(createUserInput:{
    firstName:"Marcos",
    lastName:"Silva",
    email:"my_email@gmail.com",
    role:"User"
  }){
    _id
    firstName
    lastName
    email
    role
  }
}

////////////////////////////////////////////////////////////////////////////////////////
########################################
## mutation using dynamic parameters
########################################

mutation CreateUser($createUserInput: CreateUserInput!){
  createUser(createUserInput:$createUserInput){
    _id
    firstName
    lastName
    email
    role
  }
}

{
  "createUserInput":{
    "firstName":"Marco",
    "lastName":"Silva",
    "email":"my_emai+oll@gmail.com",
    "role":"User"
  }
}

////////////////////////////////////////////////////////////////////////////////////////

########################################
## find one user query.
########################################

query GetUser($userId: String!) {
  user(_id: $userId) {
    _id
    firstName
    lastName
    email
    role
  }
}

{
  "userId": "63d46d22098ec866b470b5ee" //in your case will be different value
}

////////////////////////////////////////////////////////////////////////////////////////

########################################
## update a user
########################################

mutation UpdateUser($updateUserInput:UpdateUserInput!){
  updateUser(updateUserInput:$updateUserInput){
    _id
    firstName
    lastName
    email
    role
  }
}

{
 "updateUserInput": {
  "_id": "63d51ae7fa405df1b5fe2cc1",
  "firstName": "John",
  "lastName": "Doe"
 }
}

////////////////////////////////////////////////////////////////////////////////////////
########################################
## Offset Pagination
########################################

////////////////////////////////////////////////////////////////////////////////////////

########################################
## cursor-based pagination
########################################

Getting the first 2 users:

query {
  listUsersWithCursor(args: { first: 2 }) {
    page {
      edges {
        node {
          _id
          firstName
          lastName
          email
          role
        }
      }
      pageInfo {
        startCursor
        endCursor
        hasPreviousPage
        hasNextPage
      }
    }
  }
}

Getting the “endCursor” will allow us to move to the next two users:

query {
  listUsersWithCursor(args: { first: 2 }) {
    page {
      edges {
        node {
          _id
          firstName
          lastName
          email
          role
        }
      }
      pageInfo {
        startCursor
        endCursor
        hasPreviousPage
        hasNextPage
      }
    }
  }
}

////////////////////////////////////////////////////////////////////////////////////////

########################################
## Authentification - Create an authentificated user
########################################

mutation CreateUser($createUserInput: CreateUserInput!){
  createUser(createUserInput:$createUserInput){
    _id
    firstName
    lastName
    email
    role
  }
}

{
  "createUserInput":{
    "firstName":"Marco",
    "lastName":"Silva",
    "email":"my_emai+oll@gmail.com",
    "role":"User",
    "password": "popCorn!23"
  }
}

########################################
## test the login mutation with:
########################################

mutation loginUser($loginCredentials:LoginUserInput!) {
	loginUser(loginUserInput:$loginCredentials) {
    access_token
	}
}

{
  "loginCredentials":{
    "email":"my_emai+oll@gmail.com",
    "password": "popCorn!23"
  }
}

########################################
## When unauthenticated, If we try to test our GraphQL playground with this query, then we will have the follwing:
########################################

{
  "errors": [
    {
      "message": "Unauthorized",
      "extensions": {
        "code": "UNAUTHENTICATED",
        "response": {
          "statusCode": 401,
          "message": "Unauthorized"
        }
      }
    }
  ],
  "data": null
}

########################################
## When using our loginUser mutation, we will need to take the token and add it in our headers:
########################################

{
  "data": {
    "loginUser": {
      "access_token": 
"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im15X2VtYWkrb2xsQGdtYWlsLmNvbSIsImZpcnN0TmFtZSI6Ik1hcmNvIiwibGFzdE5hbWUiOiJTaWx2YSIsInJvbGUiOiJVc2VyIiwic3ViIjoiNjNkNTM1NjMxODJlYzVmYzFhMTAzNDM3IiwiaWF0IjoxNjc0OTE3MjU4LCJleHAiOjE2NzQ5MjMyNTh9.I7VqGw2PLRe4I84vNS4KeA5HQLEC0zkhdwAvfnx6JW8"
      }
  }
}

=>

{
  "Authorization": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im15X2VtYWkrb2xsQGdtYWlsLmNvbSIsImZpcnN0TmFtZSI6Ik1hcmNvIiwibGFzdE5hbWUiOiJTaWx2YSIsInJvbGUiOiJVc2VyIiwic3ViIjoiNjNkNTM1NjMxODJlYzVmYzFhMTAzNDM3IiwiaWF0IjoxNjc0OTE3MjU4LCJleHAiOjE2NzQ5MjMyNTh9.I7VqGw2PLRe4I84vNS4KeA5HQLEC0zkhdwAvfnx6JW8"
}